"use strict";(self.webpackChunkvkpr_docs=self.webpackChunkvkpr_docs||[]).push([[99],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6320:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],s={sidebar_position:1,version:"v1.0.20"},o="VKPR aws eks init",c={unversionedId:"commands/aws/eks/init",id:"commands/aws/eks/init",isDocsHomePage:!1,title:"VKPR aws eks init",description:"Description",source:"@site/docs/commands/aws/eks/init.mdx",sourceDirName:"commands/aws/eks",slug:"/commands/aws/eks/init",permalink:"/docs/commands/aws/eks/init",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/commands/aws/eks/init.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,version:"v1.0.20"},sidebar:"tutorialSidebar",previous:{title:"VKPR argocd set repository",permalink:"/docs/commands/argocd/set/repository"},next:{title:"VKPR aws eks tfc",permalink:"/docs/commands/aws/eks/tfc"}},p=[{value:"Description",id:"description",children:[]},{value:"Commands",id:"commands",children:[{value:"Example Usage",id:"example-usage",children:[]}]},{value:"Argument Reference",id:"argument-reference",children:[{value:"Flags",id:"flags",children:[]},{value:"Values File",id:"values-file",children:[]},{value:"Setting Provider credentials",id:"setting-provider-credentials",children:[]}]},{value:"See Also",id:"see-also",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vkpr-aws-eks-init"},"VKPR aws eks init"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Fork and setup the ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.com/vkpr/aws-eks"},"GitOps Repo")," in your Gitlab, using Gitlab Backend to save the Terraform state."),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("p",null,"Interactive inputs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  vkpr aws eks init [flags]\n")),(0,i.kt)("p",null,"Non-interactive without setting values or using ",(0,i.kt)("inlineCode",{parentName:"p"},"VKPR Values"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  vkpr aws eks init --default\n")),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="vkpr aws eks init --default"',title:'"vkpr',aws:!0,eks:!0,init:!0,'--default"':!0},'# vkpr.yaml\n---\naws:\n  eks:\n    clusterName: "eks-sample"\n    version: 1.21\n    nodes:\n      instaceType: "t3.medium"\n      quantitySize: 3\n      capacityType: "SPOT"\n      terraformState: "gitlab"\n')),(0,i.kt)("h2",{id:"argument-reference"},"Argument Reference"),(0,i.kt)("h3",{id:"flags"},"Flags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"  --default=false: Use to automatically fill inputs with default value provided on config.json\n  --eks_capacity_type='on_demand': Specifies the Node Group capacity type.\n  --eks_cluster_name='eks-sample': Specifies the EKS Cluster name.\n  --eks_cluster_node_instance_type='t3.small (vCPU:2, Mem: 2Gib)': Specifies the EKS Node instance type.\n  --eks_cluster_size='1': Specifies the number of Nodes.\n  --eks_k8s_version='1.20': Specifies the EKS Kubernetes Version.\n  --terraform_state='gitlab': Specifies where you want to store the TF state.\n")),(0,i.kt)("h3",{id:"values-file"},"Values File"),(0,i.kt)("h4",{id:"local"},"Local"),(0,i.kt)("p",null,"The following arguments are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"clusterName"))," - (Required) Specify the name of the cluster in AWS EKS. The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"eks-sample"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"version"))," - (Required) Define the Kubernetes version used. Allowed Values: ",(0,i.kt)("inlineCode",{parentName:"li"},"1.21"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1.20"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1.19"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1.18"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1.17"),". The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"1.21"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"nodes")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"instaceType"))," - (Required) Specifies the type of ec2 created to the nodes. Allowed Values: ",(0,i.kt)("inlineCode",{parentName:"li"},"t3.small"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"m5.large"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"m5.xlarge"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"t4g.small"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"m6g.large"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"m6g.xlarge"),". The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"t3.small"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"quantitySize"))," - (Required) Specifies the quantity of nodes created to the cluster. The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"capacityType"))," - (Required) Specify the capacity type from created ec2. Allowed Values: ",(0,i.kt)("inlineCode",{parentName:"li"},"spot"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"on_demand"),". The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"on_demand"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#argument-reference"},(0,i.kt)("inlineCode",{parentName:"a"},"terraformState"))," - (Required) Specify the backend to store the Terraform state. Allowed Values: ",(0,i.kt)("inlineCode",{parentName:"li"},"terraform-cloud"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"gitlab"),". The default is ",(0,i.kt)("inlineCode",{parentName:"li"},"gitlab"),".")),(0,i.kt)("h3",{id:"setting-provider-credentials"},"Setting Provider credentials"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"CAUTION: Setting credentials manually will override the credentials already saved in memory")),(0,i.kt)("h4",{id:"aws"},"AWS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  rit set credential --provider="aws" --fields="accesskeyid,secretaccesskey,region" --values="your-accesskey,your-secretaccess,your-region"\n')),(0,i.kt)("h4",{id:"gitlab"},"Gitlab"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  rit set credential --provider="gitlab" --fields="token,username" --values="your-token,your-username"\n')),(0,i.kt)("h4",{id:"terraform-cloud"},"Terraform Cloud"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  rit set credential --provider="terraformcloud" --fields="token" --values="your-token"\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"see-also"},"See Also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/commands/aws/eks/deploy"},"VKPR aws eks deploy")," - Execute the pipeline to deploy the EKS Cluster."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/commands/aws/eks/destroy"},"VKPR aws eks destroy")," - Execute the pipeline to destroy the EKS Cluster.")))}u.isMDXComponent=!0}}]);